geom_point(data = meanVals, aes(x= target, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=target, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('memory')
plotDat %>% ggplot(aes(x = target, y = d, color = ABmag, group = ID)) +
geom_point(size = 5) +
geom_line(linewidth = 2)+
ggtitle("blink memory effect")
t.test(plotDat$d[plotDat$target=='blink']-plotDat$d[plotDat$target =='noBlink'])
plotDat <- subSums[,c("ID", "1_MEM_noBlink_d", "1_MEM_blink_d", "ABmag")] %>%
pivot_longer(cols = ends_with("_d"),
names_to = "target",
names_pattern = "1_MEM_(noBlink|blink)_d",
values_to = "d")
t.test(plotDat$d[plotDat$target=='blink']-plotDat$d[plotDat$target =='noBlink'])
# allSubSums = subSums
subSums = allSubSums
T1ONLY <- subSums[, (grepl("_T1", names(subSums)) &
!grepl("FA", names(subSums)) &
!grepl("prac", names(subSums)) ) |
grepl("ID", names(subSums))]
#implement criterion 1:
subSums = subSums[rowMeans(T1ONLY[,grepl("T1", names(T1ONLY))])>.5, ]
#implement criterion 2:
subSums = subSums[rowMeans(subSums[c("dual_d", "single_d")]) >.1, ]
#implement criterion 3:
T2ONLY <- subSums[, (grepl("lag1_T2", names(subSums)) &
!grepl("FA", names(subSums)) &
!grepl("prac", names(subSums)) ) |
grepl("ID", names(subSums))]
subSums = subSums[rowMeans(T2ONLY[,grepl("T2", names(T2ONLY))], na.rm =T) > .5, ]
subSums = subSums[!grepl('AB', subSums$ID) & !grepl('715611', subSums$ID),]
sum(subSums$basic_chiP>.05)
sum(subSums$mid_chiP>.05)
sum(subSums$detail_chiP>.05)
names(subSums)
subSums$nativeLang
#### key memory relationship to AB ####
ggplot(subSums, aes(x = singleLag1_d, y = ABmag)) + geom_point(size = 5) +
stat_cor(method='pearson') +   geom_smooth(method = "lm", se = T)
# ggplot(subSums, aes(x = single_d, y = ABmag)) + geom_point(size = 5) +
#   stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
ggplot(subSums, aes(x = singleLag5_d, y = ABmag)) + geom_point(size = 5)+
stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
ggplot(subSums, aes(x = dualLag1_d, y = ABmag)) + geom_point(size = 5) +
stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
# ggplot(subSums, aes(x = dual_d, y = ABmag)) + geom_point(size = 5) +
# stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
ggplot(subSums, aes(x = dualLag5_d, y = ABmag)) + geom_point(size = 5)+
stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
aovDat = subSums %>% select(c('singleLag1_d',
'singleLag5_d',
'dualLag1_d',
'dualLag5_d', 'ID')) %>%
pivot_longer(cols = c('singleLag1_d',
'singleLag5_d',
'dualLag1_d',
'dualLag5_d'),
names_to = c('block', 'lag'),
names_pattern = "(single|dual)Lag(1|5)_d",
values_to = 'd')
library(lmerTest)
test.lm = lmer(d ~ block*lag+(1|ID), data = aovDat)
summary(test.lm)
# Prepare the data (predictors as matrix and outcome as vector)
X <- as.matrix(subSums[, c('singleLag1_d','singleLag5_d','dualLag1_d',
'dualLag5_d')])
y <- subSums$ABmag
# Fit Lasso regression model (alpha = 1 for Lasso)
lasso_model <- cv.glmnet(X, y, alpha = .5)
# View coefficients of the best model
coef(lasso_model, s = "lambda.min")
#plot accuracy across blocks, not in paper #####################################
plotDat <- subSums[,(grepl("AB_lag", names(subSums)) |
grepl("ID", names(subSums)) |
grepl("ABmag", names(subSums))) &
!grepl("prac", names(subSums))] %>%
pivot_longer(cols = contains("AB_lag"),
names_to = c("block", 'lag', 'var'),
names_pattern = "([1-6])_AB_lag([1-5])_(.*)",
values_to = 'propCor')
plotDat$dualTarg = as.logical(as.numeric(plotDat$block) %% 2)
plotDatCollapsed <- plotDat %>%
group_by(dualTarg, ID, lag, var) %>%
reframe(meanVal = mean(propCor), ABmag = ABmag)
plotDat %>% filter(var == "T1") %>%
ggplot(aes(x = block, y = propCor, group = ID, color = ABmag)) +
geom_point(size = 5) +
geom_line(linewidth = 3) +
facet_grid(~lag)+
ggtitle("T1 accuracy by lag over blocks")
plotDat %>% filter(var == "T2T1", !is.na(propCor)) %>%
ggplot(aes(x = block, y = propCor, group = ID, color = ABmag)) +
geom_point(size = 5) +
geom_line(linewidth = 1) +
facet_grid(~lag)+
ggtitle("T2|T1 accuracy by lag over blocks")
dualLabs = c('single', 'dual')
plotDatCollapsed$dualTarg = dualLabs[as.numeric(plotDatCollapsed$dualTarg)+1]
#there is a small but significant difference in T1 detection between single v. dual target
t.test(plotDatCollapsed$meanVal[plotDatCollapsed$dualTarg=='dual' &
plotDatCollapsed$lag == 5 &
plotDatCollapsed$var == 'T1']-
plotDatCollapsed$meanVal[plotDatCollapsed$dualTarg=='single' &
plotDatCollapsed$lag == 5 &
plotDatCollapsed$var == 'T1'])
mean(plotDatCollapsed$meanVal[plotDatCollapsed$dualTarg=='dual' &
plotDatCollapsed$lag == 5 &
plotDatCollapsed$var == 'T1'])
mean(plotDatCollapsed$meanVal[plotDatCollapsed$dualTarg=='single' &
plotDatCollapsed$lag == 5 &
plotDatCollapsed$var == 'T1'])
meanVals <- plotDatCollapsed %>% filter(var == 'T1', dualTarg == 'single') %>%
group_by(lag) %>%
summarise(mean_lag = mean(meanVal),
ste_lag = sd(meanVal)/sqrt(26)* qt(.975, 26))
meanVals$ID = 99
plotDatCollapsed %>% filter(var == 'T1', dualTarg == 'single') %>%
ggplot(aes(x = lag, y = meanVal, group = ID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('1','5')) +
scale_y_continuous(breaks = seq(.2, 1.0, .1), limits = c(.2,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= lag, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= lag, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=lag, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('T1 detection p(T1)')
meanVals <- plotDatCollapsed %>% filter(var == 'T2T1', dualTarg == 'dual') %>%
group_by(lag) %>%
summarise(mean_lag = mean(meanVal),
ste_lag = sd(meanVal)/sqrt(26)* qt(.975, 26))
meanVals$ID = 99
plotDatCollapsed %>% filter(var == 'T2T1', dualTarg == 'dual') %>%
ggplot(aes(x = lag, y = meanVal, group = ID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('1','5')) +
scale_y_continuous(breaks = seq(.2, 1.0, .1), limits = c(.2,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= lag, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= lag, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=lag, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('T1 detection p(T1)')
#########################################################overall memory performance single v dual target
plotDat <- subSums[,c("ID", "dualLag1_d", "singleLag1_d", "ABmag")] %>%
pivot_longer(cols = ends_with("_d"),
names_to = "target",
names_pattern = "(single|dual)Lag1_d",
values_to = "d")
t.test(plotDat$d[plotDat$target=='dual']-plotDat$d[plotDat$target =='single'])
sum(plotDat$d[plotDat$target=='dual']<plotDat$d[plotDat$target =='single'])
meanVals <- plotDat  %>%
group_by(target) %>%
summarise(mean_lag = mean(d),
ste_lag = sd(d)/sqrt(26)* qt(.975, 26))
meanVals$ID = 99
plotDat %>%
ggplot(aes(x = target, y = d, group = ID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('dual','single')) +
scale_y_continuous(breaks = seq(0, 3.0, .5), limits = c(0,3)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= target, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= target, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=target, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('memory')
plotDat %>%
ggplot(aes(x = target, y = d, group = ID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('dual','single')) +
scale_y_continuous(breaks = seq(0, 2.5, .5), limits = c(0,3)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= target, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= target, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=target, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('memory')
plotDat %>%
ggplot(aes(x = target, y = d, group = ID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('dual','single')) +
scale_y_continuous(breaks = seq(0, 2.5, .5), limits = c(0,2.5)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= target, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= target, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=target, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('memory')
#lag 5 memory:
plotDat <- subSums[,c("ID", "dualLag5_d", "singleLag5_d", "ABmag")] %>%
pivot_longer(cols = ends_with("_d"),
names_to = "target",
names_pattern = "(single|dual)Lag5_d",
values_to = "d")
t.test(plotDat$d[plotDat$target=='dual']-plotDat$d[plotDat$target =='single'])
sum(plotDat$d[plotDat$target=='dual']<plotDat$d[plotDat$target =='single'])
meanVals <- plotDat  %>%
group_by(target) %>%
summarise(mean_lag = mean(d),
ste_lag = sd(d)/sqrt(26)* qt(.975, 26))
meanVals$ID = 99
plotDat %>%
ggplot(aes(x = target, y = d, group = ID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('dual','single')) +
scale_y_continuous(breaks = seq(0, 2.5, .5), limits = c(0,2.5)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= target, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= target, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=target, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('memory')
#blink memory effect:
plotDat <- subSums[,c("ID", "noBlink_d", "blink_d", "ABmag")] %>%
pivot_longer(cols = ends_with("_d"),
names_to = "target",
names_pattern = "(noBlink|blink)_d",
values_to = "d")
meanVals <- plotDat  %>%
group_by(target) %>%
summarise(mean_lag = mean(d),
ste_lag = sd(d)/sqrt(26)* qt(.975, 26))
meanVals$ID = 99
plotDat %>%
ggplot(aes(x = target, y = d, group = ID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('blink','no blink')) +
scale_y_continuous(breaks = seq(0, 3.0, .5), limits = c(0,3)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= target, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= target, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=target, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('memory')
plotDat %>% ggplot(aes(x = target, y = d, color = ABmag, group = ID)) +
geom_point(size = 5) +
geom_line(linewidth = 2)+
ggtitle("blink memory effect")
t.test(plotDat$d[plotDat$target=='blink']-plotDat$d[plotDat$target =='noBlink'])
plotDat <- subSums[,c("ID", "1_MEM_noBlink_d", "1_MEM_blink_d", "ABmag")] %>%
pivot_longer(cols = ends_with("_d"),
names_to = "target",
names_pattern = "1_MEM_(noBlink|blink)_d",
values_to = "d")
t.test(plotDat$d[plotDat$target=='blink']-plotDat$d[plotDat$target =='noBlink'])
View(subSums)
names(subSums)
#plot accuracy across blocks, not in paper #####################################
plotDat <- subSums[,(grepl("AB_lag", names(subSums)) |
grepl("ID", names(subSums)) |
grepl("ABmag", names(subSums))) &
!grepl("prac", names(subSums))] %>%
pivot_longer(cols = contains("AB_lag"),
names_to = c("block", 'lag', 'var'),
names_pattern = "([1-6])_AB_lag([1-5])_(.*)",
values_to = 'propCor')
plotDat$dualTarg = as.logical(as.numeric(plotDat$block) %% 2)
plotDatCollapsed <- plotDat %>%
group_by(dualTarg, ID, lag, var) %>%
reframe(meanVal = mean(propCor), ABmag = ABmag)
plotDat %>% filter(var == "T1") %>%
ggplot(aes(x = block, y = propCor, group = ID, color = ABmag)) +
geom_point(size = 5) +
geom_line(linewidth = 3) +
facet_grid(~lag)+
ggtitle("T1 accuracy by lag over blocks")
plotDat %>% filter(var == "T2T1", !is.na(propCor)) %>%
ggplot(aes(x = block, y = propCor, group = ID, color = ABmag)) +
geom_point(size = 5) +
geom_line(linewidth = 1) +
facet_grid(~lag)+
ggtitle("T2|T1 accuracy by lag over blocks")
dualLabs = c('single', 'dual')
plotDatCollapsed$dualTarg = dualLabs[as.numeric(plotDatCollapsed$dualTarg)+1]
meanVals <- plotDatCollapsed %>% filter(var == 'T2T1', dualTarg == 'dual') %>%
group_by(lag) %>%
summarise(mean_lag = mean(meanVal),
ste_lag = sd(meanVal)/sqrt(26)* qt(.975, 26))
meanVals$ID = 99
plotDatCollapsed %>% filter(var == 'T2T1', dualTarg == 'dual') %>%
ggplot(aes(x = lag, y = meanVal, group = ID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('1','5')) +
scale_y_continuous(breaks = seq(.2, 1.0, .1), limits = c(.2,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= lag, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= lag, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=lag, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('T2 detection p(T2|T1)')
seq(5,200, 20)
sampleSizes = seq(5,200, 20)
reps = 100
results = data.frame(d = rep(0, 20*reps),
n = rep(0, 20*reps))
ri = 1
for(sampSize in sampleSizes){
for(ii in 1:reps){
samp1 = rnorm(sampSize)
samp2 = rnorm(sampSize)
m1 = mean(samp1)
m2 = mean(samp2)
ss1 = sum((samp1 - m1)^2)
ss2 = sum((samp2 - m2)^2)
spool = sqrt((ss1+ss2) / (sampSize*2 - 2))
d = (m1 - m2)
results$d[ri] = d
results$n[ri] = sampSize
ri = ri+1
}
}
View(results)
ggplot(results, aes(x = n, y = d)) + geom_point()
library(tidyverse)
ggplot(results, aes(x = n, y = d)) + geom_point()
sampleSizes = seq(5,1000, 20)
reps = 100
results = data.frame(d = rep(0, length(sampleSizes)*reps),
n = rep(0, length(sampleSizes)*reps))
ri = 1
for(sampSize in sampleSizes){
for(ii in 1:reps){
samp1 = rnorm(sampSize)
samp2 = rnorm(sampSize)
m1 = mean(samp1)
m2 = mean(samp2)
ss1 = sum((samp1 - m1)^2)
ss2 = sum((samp2 - m2)^2)
spool = sqrt((ss1+ss2) / (sampSize*2 - 2))
d = (m1 - m2)
results$d[ri] = d
results$n[ri] = sampSize
ri = ri+1
}
}
ggplot(results, aes(x = n, y = d)) + geom_point() +
geom_hline(yintercept = .2)
results %>% group_by(n) %>% summarize(prop.2 = sum(d>.2))
results %>% group_by(n) %>% summarize(prop.2 = sum(d>.2)/length(d))
results %>% group_by(n) %>% summarize(prop.2 = sum(d>.2)/length(d)) %>%
ggplot(aes(x = n, y = prop.2)) + geom_line()
results %>% group_by(n) %>% summarize(prop.2 = sum(d>.2)/length(d)) %>%
ggplot(aes(x = n, y = prop.2)) + geom_line() +
ylab('prop effect sizes greater than .2')
library(lmtest)
library(lsr)
library(tidyverse)
library(car)
library(circular)
library(kableExtra)
library(pracma)
library(glmtoolbox)
source('G:\\My Drive\\GitHub/SheffieldAutismBiomarkers/helperFuncsFinal.R')
## set path to github repo on local machine here:
path = "G:\\My Drive\\GitHub\\SheffieldAutismBiomarkers\\"
# path = "C:\\Users\\Adam Dede\\Documents\\GitHub\\SheffieldAutismBiomarkers\\"
figPath = "G:\\My Drive\\Milne\\pubFigPanels\\"
test <- read.csv(paste(path, "autismBiomarkersAllData3.csv", sep = ''))
unique(test$dataSet)
test %>% filter(dataSet == 'femaleASD') -> df
View(df)
test <- read.csv(paste(path, "autismBiomarkersAllData3.csv", sep = ''))
test %>% filter(dataSet == 'femaleASD') -> df
View(df)
library(lmtest)
library(lsr)
library(tidyverse)
library(car)
library(circular)
library(kableExtra)
library(pracma)
library(glmtoolbox)
results = read.csv('C:\\Users\\dtf8829\\Downloads\\results_table.csv')
predNames = c('age', 'sex', 'IQ', 'Diag', 'Diag_Age', 'Diag_Sex', 'Diag_Age_Sex')
stabNames = c('Diag_stab', 'Diag_Age_stab', 'Diag_Sex_stab', 'Diag_Age_Sex_stab',
'Age_stab', 'AgeHigh_stab', 'Sex_stab', 'SexHigh_stab')
# stabNames = c('Diag_stab', 'Diag_Age_stab', 'Diag_Sex_stab', 'Diag_Age_Sex_stab',
#               'Age_stab',  'Sex_stab', 'SexHigh_stab')
ageLabs = c(paste(as.character(min(filter(dat, age>ageGroups[1] & age<ageGroups[2])$age)), '-',
as.character(max(filter(dat, age>ageGroups[1] & age<ageGroups[2])$age)),
' months', sep = ''),
paste(as.character(min(filter(dat, age>ageGroups[2] & age<ageGroups[3])$age)), '-',
as.character(max(filter(dat, age>ageGroups[2] & age<ageGroups[3])$age)),
' months', sep = ''),
paste(as.character(min(filter(dat, age>ageGroups[3] & age<ageGroups[4])$age)), '-',
as.character(max(filter(dat, age>ageGroups[3] & age<ageGroups[4])$age)),
' months', sep = ''))
myColors = c('#F22F29','#CD4D5D', '#FB9564', '#4ED6B2','#2C64C0', '#1B47A5',    '#7B5C52')
colScale <- scale_color_manual(name = "type",values = myColors)
fillScale <- scale_fill_manual(name = "type",values = myColors)
theme_set(theme_gray(base_size = 30))
View(results)
predNames = predNames[c(1,2,4)]
vari=1
ggplot(results,
aes_string(x=predNames[vari], color = 'type', fill = 'type')) +
colScale +
fillScale +
xlab('effect size (\U1D702\U00B2\U209A)') +
geom_histogram(breaks = seq(0,1,.035)) +
coord_cartesian(xlim=c(0,.350001),ylim = c(0,100)) +
theme_classic(base_size = 30)+
theme(axis.ticks.length=unit(-0.5, "cm"),
axis.line = element_line(colour = 'black', size = 3),
axis.ticks = element_line(colour = 'black', size = 3)) +
scale_x_continuous(expand = c(0, 0), limits = c(0, .65), breaks = seq(0,.6,.035)) +
scale_y_continuous(expand = c(0, 0), breaks = seq(0,100,20)) +
geom_vline(xintercept = .035, linetype = 'dashed', size = 5)
View(results)
names(results)
source("C:/Users/dtf8829/Downloads/makeHistPlots.R")
source("C:/Users/dtf8829/Downloads/makeHistPlots.R")
library(tidyverse)
# install.packages("kableExtra")
library(kableExtra)
setwd("G:\\My Drive\\GitHub\\AB_pic_analysis")
source('AB_pic_helperFuncs.R')
#data file path
datFilePath = paste(getwd(), '/data', sep = '')
#import the data as a list of data.frames
allDat = readCCdat(datFilePath)
df = allDat[[2]]
allDat = allDat[[1]]
df = plotBasicAB(allDat, df,3)
View(allDat)
View(df)
abDat = lapply(allDat, function(x) subset(x, phase=="main" & skip1==0 & skip2 ==0))
View(abDat)
abTypes = sort(unique(abDat[[1]]$cndTyp))
colsOut = unlist(lapply(abTypes, function(x) unlist(lapply(goalStats, function(y) paste(x,y, sep='.')))))
goalStats = c('T1', 'T2', 'T2.T1')
colsOut = unlist(lapply(abTypes, function(x) unlist(lapply(goalStats, function(y) paste(x,y, sep='.')))))
abTypes
test = abDat[[1]]
View(test)
test = abDat[[4]]
View(test)
test = abDat[[8]]
View(df)
View(allDat)
unlist(lapply(allDat, function(x) x$curStimTim[240]))
test = allDat[[4]]
View(test)
test$curStimTim
allDat = readCCdat(datFilePath)
df = allDat[[2]]
allDat = allDat[[1]]
test = allDat[[4]]
test$curStimTim
unlist(lapply(allDat, function(x) x$curStimTim[240]))
unlist(lapply(allDat, function(x) x$curStimTim[140]))
mean(unlist(lapply(allDat, function(x) x$curStimTim[140])))
