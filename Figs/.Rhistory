}
if(types[tt]=='new'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='novel']
}
}
}
}else{ #this is a single target block
types = sTypes
for(tt in 1:length(types)){
for(cc in 1:numConf){
if(types[tt]=='lag1S'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink'] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']
}
if(types[tt]=='lag5S'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='lag5']
}
if(types[tt]=='oldS'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink'] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']+
dat$count[dat$conf==cc & dat$trialType=='lag5']
}
if(types[tt]=='new'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='novel']
}
}
}
}
}
#fit most granular version of model:
uvsdDETAIL = allConf %>% filter(trialType != 'oldS', trialType != 'oldD',
trialType != 'lag1D') %>%
fitUVSD()
uvsdDETAIL = allConf %>% filter(trialType == 'blink' |
trialType == 'noBlink' |
trialType == 'new') %>%
fitUVSD()
#fit medium version of model:
uvsdMID = allConf %>% filter(trialType != 'oldS' & trialType != 'oldD' &
trialType != 'blink', trialType != 'noBlink') %>%
fitUVSD()
#fit basic version of model:
uvsdBASIC = allConf %>% filter(trialType == 'oldS' | trialType == 'oldD' |
trialType == 'new') %>%
fitUVSD()
test[[1]][1,'detail_chi'] = uvsdDETAIL$chi
test[[1]][1,'detail_chiP'] = uvsdDETAIL$chiP
test[[1]][1,'mid_chi'] = uvsdMID$chi
test[[1]][1,'mid_chiP'] = uvsdMID$chiP
test[[1]][1,'basic_chi'] = uvsdBASIC$chi
test[[1]][1,'basic_chiP'] = uvsdBASIC$chiP
test[[1]][1,'dualLag1_d'] = uvsdMID$lag1D_d
test[[1]][1,'dualLag5_d'] = uvsdMID$lag5D_d
if("blink_d" %in% names(uvsdDETAIL)){
test[[1]][1,'blink_d'] = uvsdDETAIL$blink_d
} else {
test[[1]][1,'blink_d'] = NA
}
if("noBlink_d" %in% names(uvsdDETAIL)){
test[[1]][1,'noBlink_d'] = uvsdDETAIL$noBlink_d
} else {
test[[1]][1,'noBlink_d'] = NA
}
test[[1]][1,'singleLag1_d'] = uvsdMID$lag1S_d
test[[1]][1,'singleLag5_d'] = uvsdMID$lag5S_d
test[[1]][1, 'dual_d'] = uvsdBASIC$oldD_d
test[[1]][1, 'single_d'] = uvsdBASIC$oldS_d
GrandConf$count = GrandConf$count + allConf$count
plotDat <- allConf %>% group_by(trialType) %>%
reframe(prop = count / sum(count), conf = conf)
outPlot <- ggplot(plotDat, aes(x = conf, y = prop, color = trialType, fill = trialType)) +
geom_bar(stat = 'identity', position = 'dodge')+
ggtitle(paste(test[[1]]$ID, 'allData'))
png(paste(figsOut, '\\allConf_ConfRatings_', test[[1]]$ID, '.png',sep=''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
subSums = rbind(subSums, test[[1]])
print(paste(test[[1]]$ID, sum(test[[1]][grepl('pnts', names(subSums))])/250))
payments = rbind(payments, data.frame('ID' = test[[1]]$ID, 'bonus' = sum(test[[1]][grepl('pnts', names(subSums))])/250))
} else {
payments = rbind(payments, data.frame('ID' = test[[1]]$ID, 'bonus' = 99999))
}
}
demoInfo <- subSums %>% select(ID, date, age, sex, nativeLang)
#get the AB mag overall
subSums$ABmag = rowMeans(subSums[,grepl("AB_lag1_T2T1", names(subSums)) &
!grepl("prac", names(subSums))] -
subSums[,grepl("AB_lag5_T2T1", names(subSums)) &
!grepl("prac", names(subSums))],
na.rm = T)
#AB mag blockwise
for( ii in c(1,3,5)){
subSums[,paste0('ABmag_', ii)] = subSums[,paste0(ii,"_AB_lag1_T2T1")] -
subSums[,paste0(ii,"_AB_lag5_T2T1")]
}
subSums_long <- subSums %>%
pivot_longer(cols = c('ABmag_1', 'ABmag_3', 'ABmag_5'),
names_to = 'block', values_to = 'new_ABmag')
subSums_long %>% ggplot(aes(x = block, y = new_ABmag, group = ID)) + geom_line()
subSums$T2FA = rowMeans(subSums[,grepl('T2FA', names(subSums))], na.rm = T)
subSums$lag1_T2T1 = rowMeans(subSums[,grepl('lag1_T2T1', names(subSums))], na.rm = T)
# allSubSums = subSums
subSums = allSubSums
T1ONLY <- subSums[, (grepl("_T1", names(subSums)) &
!grepl("FA", names(subSums)) &
!grepl("prac", names(subSums)) ) |
grepl("ID", names(subSums))]
#implement criterion 1:
subSums = subSums[rowMeans(T1ONLY[,grepl("T1", names(T1ONLY))])>.5, ]
#implement criterion 2:
subSums = subSums[rowMeans(subSums[c("dual_d", "single_d")]) >.1, ]
#implement criterion 3:
T2ONLY <- subSums[, (grepl("lag1_T2", names(subSums)) &
!grepl("FA", names(subSums)) &
!grepl("prac", names(subSums)) ) |
grepl("ID", names(subSums))]
subSums = subSums[rowMeans(T2ONLY[,grepl("T2", names(T2ONLY))], na.rm =T) > .5, ]
sum(subSums$basic_chiP>.05)
sum(subSums$mid_chiP>.05)
sum(subSums$detail_chiP>.05)
# grand conf: ##############################################
plotDat <- GrandConf %>% group_by(trialType) %>%
reframe(prop = count / sum(count), conf = conf) %>%
filter(trialType == 'blink' | trialType == 'noBlink' | trialType == 'new')
ggplot(plotDat, aes(x = conf, y = prop, color = trialType, fill = trialType)) +
geom_bar(stat = 'identity', position = 'dodge')
uvsdDETAIL = GrandConf %>% filter(trialType == 'blink' |
trialType == 'noBlink' |
trialType == 'new') %>%
fitUVSD()
uvsdDETAIL
ggplot(subSums, aes(x = singleLag1_d, y = ABmag)) + geom_point(size = 5) +
stat_cor(method='pearson') +
geom_smooth(method = "lm", se = T, color = 'black') +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20))
ggplot(subSums, aes(x = single_d, y = ABmag)) + geom_point(size = 5) +
stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
ggplot(subSums, aes(x = singleLag5_d, y = ABmag)) + geom_point(size = 5)+
stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
ggplot(subSums, aes(x = dualLag1_d, y = ABmag)) + geom_point(size = 5) +
stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
ggplot(subSums, aes(x = dual_d, y = ABmag)) + geom_point(size = 5) +
stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
ggplot(subSums, aes(x = dualLag5_d, y = ABmag)) + geom_point(size = 5)+
stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
ggplot(subSums, aes(x = dual_d, y = ABmag)) + geom_point(size = 5) +
stat_cor(method='pearson')+   geom_smooth(method = "lm", se = T)
uvsdBASIC
2*5
qchisq(.95, 10)
names(subSums)
ggplot(subSums, aes(x = basic_chi, y = basic_chiP)) + geom_point()
ggplot(subSums, aes(x = basic_chi, y = basic_chiP)) + geom_point() + geom_vline(xintercept = 18.3)
ggplot(subSums, aes(x = basic_chi, y = basic_chiP)) + geom_point() + geom_vline(xintercept = 18.3) + geom_hline(yintercept = .05)
sum(subSums$basic_chiP>.05)
library(ggpubr)
library(tidyverse)
library(lme4)
repoPath = "G:/My Drive/GitHub/imageAB_submission"
source(paste0(repoPath, '/dualSingleHelperFuncs.R'))
path = paste0(repoPath, '/prolificDat_240612') #experiment for AB behavioral paper
figsOut = paste0(repoPath, '/prolificDatFigs')
file_list <- list.files(path = path, full.names = TRUE)
subSums = data.frame()
numConf = 3 #how many confidence ratings will the scale be reduced to
GrandConf = data.frame('count' = rep(0,numConf*9),
'conf' = rep(seq(1,numConf), 9),
'trialType' = c(rep('lag1D', numConf),
rep('lag1S', numConf),
rep('blink',numConf),
rep('noBlink',numConf),
rep('lag5D', numConf),
rep('lag5S', numConf),
rep('oldD', numConf),
rep('oldS', numConf),
rep('new', numConf)))
payments = data.frame()
for(sub in 1:length(file_list)){
curSub = file_list[sub]
test = readABmemFile(curSub)
subDat = test[[2]]
if(length(subDat)>=1){
#I want the overall lag 1 v. lag 5 v. novel for dual target v. single target
#find memBlocks
memBlocks = c()
for(bb in 1:length(subDat)){
if(grepl('MEM',subDat[[bb]]$blkName[1])){
memBlocks = c(memBlocks, bb)
}
}
dat = subDat[[memBlocks[1]]]
numConf = max(dat$conf)
allConf = data.frame('count' = rep(0,numConf*9),
'conf' = rep(seq(1,numConf), 9),
'trialType' = c(rep('lag1D', numConf),
rep('lag1S', numConf),
rep('blink',numConf),
rep('noBlink',numConf),
rep('lag5D', numConf),
rep('lag5S', numConf),
rep('oldD', numConf),
rep('oldS', numConf),
rep('new', numConf)))
dTypes = c('lag1D', 'blink', 'noBlink', 'lag5D', 'oldD', 'new')
sTypes = c('lag1S', 'lag5S', 'oldS', 'new')
for(blk in 1:length(memBlocks)){
dat = subDat[[memBlocks[blk]]]
if(dat$dualTarget[1]){ #this is a dual target block!
types = dTypes
for(tt in 1:length(types)){
for(cc in 1:numConf){
if(types[tt]=='lag1D'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink'] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']
}
if(types[tt]=='blink'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink']
}
if(types[tt]=='noBlink'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']
}
if(types[tt]=='lag5D'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='lag5']
}
if(types[tt]=='oldD'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink'] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']+
dat$count[dat$conf==cc & dat$trialType=='lag5']
}
if(types[tt]=='new'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='novel']
}
}
}
}else{ #this is a single target block
types = sTypes
for(tt in 1:length(types)){
for(cc in 1:numConf){
if(types[tt]=='lag1S'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink'] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']
}
if(types[tt]=='lag5S'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='lag5']
}
if(types[tt]=='oldS'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink'] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']+
dat$count[dat$conf==cc & dat$trialType=='lag5']
}
if(types[tt]=='new'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='novel']
}
}
}
}
}
#fit most granular version of model:
uvsdDETAIL = allConf %>% filter(trialType != 'oldS', trialType != 'oldD',
trialType != 'lag1D') %>%
fitUVSD()
uvsdDETAIL = allConf %>% filter(trialType == 'blink' |
trialType == 'noBlink' |
trialType == 'new') %>%
fitUVSD()
#fit medium version of model:
uvsdMID = allConf %>% filter(trialType != 'oldS' & trialType != 'oldD' &
trialType != 'blink', trialType != 'noBlink') %>%
fitUVSD()
#fit basic version of model:
uvsdBASIC = allConf %>% filter(trialType == 'oldS' | trialType == 'oldD' |
trialType == 'new') %>%
fitUVSD()
test[[1]][1,'detail_chi'] = uvsdDETAIL$chi
test[[1]][1,'detail_chiP'] = uvsdDETAIL$chiP
test[[1]][1,'mid_chi'] = uvsdMID$chi
test[[1]][1,'mid_chiP'] = uvsdMID$chiP
test[[1]][1,'basic_chi'] = uvsdBASIC$chi
test[[1]][1,'basic_chiP'] = uvsdBASIC$chiP
test[[1]][1,'dualLag1_d'] = uvsdMID$lag1D_d
test[[1]][1,'dualLag5_d'] = uvsdMID$lag5D_d
if("blink_d" %in% names(uvsdDETAIL)){
test[[1]][1,'blink_d'] = uvsdDETAIL$blink_d
} else {
test[[1]][1,'blink_d'] = NA
}
if("noBlink_d" %in% names(uvsdDETAIL)){
test[[1]][1,'noBlink_d'] = uvsdDETAIL$noBlink_d
} else {
test[[1]][1,'noBlink_d'] = NA
}
test[[1]][1,'singleLag1_d'] = uvsdMID$lag1S_d
test[[1]][1,'singleLag5_d'] = uvsdMID$lag5S_d
test[[1]][1, 'dual_d'] = uvsdBASIC$oldD_d
test[[1]][1, 'single_d'] = uvsdBASIC$oldS_d
GrandConf$count = GrandConf$count + allConf$count
plotDat <- allConf %>% group_by(trialType) %>%
reframe(prop = count / sum(count), conf = conf)
outPlot <- ggplot(plotDat, aes(x = conf, y = prop, color = trialType, fill = trialType)) +
geom_bar(stat = 'identity', position = 'dodge')+
ggtitle(paste(test[[1]]$ID, 'allData'))
png(paste(figsOut, '\\allConf_ConfRatings_', test[[1]]$ID, '.png',sep=''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
subSums = rbind(subSums, test[[1]])
print(paste(test[[1]]$ID, sum(test[[1]][grepl('pnts', names(subSums))])/250))
payments = rbind(payments, data.frame('ID' = test[[1]]$ID, 'bonus' = sum(test[[1]][grepl('pnts', names(subSums))])/250))
} else {
payments = rbind(payments, data.frame('ID' = test[[1]]$ID, 'bonus' = 99999))
}
}
demoInfo <- subSums %>% select(ID, date, age, sex, nativeLang)
#get the AB mag overall
subSums$ABmag = rowMeans(subSums[,grepl("AB_lag1_T2T1", names(subSums)) &
!grepl("prac", names(subSums))] -
subSums[,grepl("AB_lag5_T2T1", names(subSums)) &
!grepl("prac", names(subSums))],
na.rm = T)
#AB mag blockwise
for( ii in c(1,3,5)){
subSums[,paste0('ABmag_', ii)] = subSums[,paste0(ii,"_AB_lag1_T2T1")] -
subSums[,paste0(ii,"_AB_lag5_T2T1")]
}
subSums_long <- subSums %>%
pivot_longer(cols = c('ABmag_1', 'ABmag_3', 'ABmag_5'),
names_to = 'block', values_to = 'new_ABmag')
subSums_long %>% ggplot(aes(x = block, y = new_ABmag, group = ID)) + geom_line()
subSums$T2FA = rowMeans(subSums[,grepl('T2FA', names(subSums))], na.rm = T)
subSums$lag1_T2T1 = rowMeans(subSums[,grepl('lag1_T2T1', names(subSums))], na.rm = T)
# allSubSums = subSums
subSums = allSubSums
T1ONLY <- subSums[, (grepl("_T1", names(subSums)) &
!grepl("FA", names(subSums)) &
!grepl("prac", names(subSums)) ) |
grepl("ID", names(subSums))]
#implement criterion 1:
subSums = subSums[rowMeans(T1ONLY[,grepl("T1", names(T1ONLY))])>.5, ]
#implement criterion 2:
subSums = subSums[rowMeans(subSums[c("dual_d", "single_d")]) >.1, ]
#implement criterion 3:
T2ONLY <- subSums[, (grepl("lag1_T2", names(subSums)) &
!grepl("FA", names(subSums)) &
!grepl("prac", names(subSums)) ) |
grepl("ID", names(subSums))]
subSums = subSums[rowMeans(T2ONLY[,grepl("T2", names(T2ONLY))], na.rm =T) > .5, ]
sum(subSums$basic_chiP>.05)
sum(subSums$mid_chiP>.05)
sum(subSums$detail_chiP>.05)
# grand conf: ##############################################
plotDat <- GrandConf %>% group_by(trialType) %>%
reframe(prop = count / sum(count), conf = conf) %>%
filter(trialType == 'blink' | trialType == 'noBlink' | trialType == 'new')
ggplot(plotDat, aes(x = conf, y = prop, color = trialType, fill = trialType)) +
geom_bar(stat = 'identity', position = 'dodge')
uvsdDETAIL = GrandConf %>% filter(trialType == 'blink' |
trialType == 'noBlink' |
trialType == 'new') %>%
fitUVSD()
ggplot(subSums, aes(x = singleLag1_d, y = ABmag)) + geom_point(size = 5) +
stat_cor(method='pearson') +
geom_smooth(method = "lm", se = T, color = 'black') +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20))
View(demoInfo)
mean(demoInfo$age)
mean(demoInfo$age, na.rm = T)
sd(demoInfo$age, na.rm = T)
sub
sub = file_list[sub]
rawDat = read.csv(sub)
View(rawDat)
test = filter(rawDat, !is.na(T1_Identity))
View(test)
test$T1_Identity[1]
length(test$T1_Identity)
length(test$T1_Identity[1])
length(test$T1_Identity[[1]])
length(test$T1_Identity[[15]])
test = filter(rawDat, !is.na(T1_PA))
test = filter(test, !grepl('prac', TrialType))
allPics = pivot_longer(test, cols = names(test)[grepl('Img', names(test))], names_to = 'img', values_to = 'file')
allPics = pivot_longer(test, cols = names(test)[grepl('Img', names(test)) & !grepl('Total', names(test))], names_to = 'img', values_to = 'file')
View(allPics)
allPics = pivot_longer(test, cols = names(test)[grepl('Img', names(test)) & !grepl('Total', names(test))], names_to = 'img', values_to = 'file') %>% select(c('img', 'file'))
length(unique(allPics(file)))
length(unique(allPics$file))
sum(grepl('tapler', unique(allPics$file)))
uniImages = unique(allPics$file)
sapply(uniImages, function(x) sum(grepl(x, allPics$file)))
uniCounts = sapply(uniImages, function(x) sum(grepl(x, allPics$file)))
uniImages = data.frame('imgID' = uniImages, 'count' = uniCounts)
View(uniImages)
sum(uniImages$count == 1)
352 - 276
View(rawDat)
unique(rawDat$TrialType)
test = rawDat[grepl('_MEM', rawDat$TrialType),]
View(test)
#trial counts and images used:
rawDat = read.csv(file_list[10])
ABdat = rawDat[grepl('_AB', rawDat$TrialType), ]
ABdat = rawDat[grepl('_AB', rawDat$TrialType), ]
allPics = pivot_longer(test, cols =
names(test)[grepl('Img', names(test)) &
!grepl('Total', names(test))],
names_to = 'img', values_to = 'file') %>%
select(c('img', 'file'))
sum(grepl('tapler', unique(allPics$file)))
uniImages = unique(allPics$file)
uniCounts = sapply(uniImages, function(x) sum(grepl(x, allPics$file)))
uniImages = data.frame('imgID' = uniImages, 'count' = uniCounts)
View(uniImages)
ABdat = rawDat[grepl('_AB', rawDat$TrialType), ]
allPics = pivot_longer(test, cols =
names(test)[grepl('Img', names(test)) &
!grepl('Total', names(test))],
names_to = 'img', values_to = 'file') %>%
select(c('img', 'file'))
sum(grepl('tapler', unique(allPics$file)))
View(allPics)
ABdat = rawDat[grepl('_AB', rawDat$TrialType), ]
View(ABdat)
View(allPics)
allPics = pivot_longer(test, cols =
names(test)[grepl('Img', names(test)) &
!grepl('Total', names(test))],
names_to = 'img', values_to = 'file')
allPics$file
ABdat$Img3
allPics = pivot_longer(test, cols =
names(test)[grepl('Img', names(test)) &
!grepl('Total', names(test))],
names_to = 'img', values_to = 'file') %>%
select(c('img', 'file'))
allPics = pivot_longer(ABdat, cols =
names(test)[grepl('Img', names(test)) &
!grepl('Total', names(test))],
names_to = 'img', values_to = 'file') %>%
select(c('img', 'file'))
uniImages = unique(allPics$file)
uniCounts = sapply(uniImages, function(x) sum(grepl(x, allPics$file)))
uniImages = data.frame('imgID' = uniImages, 'count' = uniCounts)
View(uniImages)
memDat = rawDat[grepl('_MEM', rawDat$TrialType), ]
memDat = select(memDat, !is.na(memDat[4,]))
!is.na(memDat[4,]
)
unlist(!is.na(memDat[4,]))
memDat = select(memDat, unlist(!is.na(memDat[4,])))
memDat = select(memDat, !is.na(memDat[[4,]]))
!is.na(unlist(memDat[4,]))
memDat = select(memDat, !is.na(unlist(memDat[4,])))
memDat = select(memDat, names(memDat)[!is.na(unlist(memDat[4,]))])
View(memDat)
sum(memDat$CondType == 'new')
View(memDat)
sum(memDat$priorLag == 1)
69+69
sum(memDat$priorLag == 5)
33+33
memDat = rawDat[grepl('_MEM', rawDat$TrialType) & ! grepl('prac', rawDat$TrialType), ]
memDat = select(memDat, names(memDat)[!is.na(unlist(memDat[4,]))])
sum(memDat$CondType == 'new')
sum(memDat$priorLag == 5)
sum(memDat$priorLag == 1)
sum(memDat$priorLag == 1)
sum(memDat$CondType == 'new')
138+138
138+138+102
102+102+102
sum(memDat$priorLag == 1)
sum(memDat$priorLag == 2)
sum(memDat$priorLag == 5)
