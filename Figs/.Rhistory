ai = ((ii-1)*2+(jj-1))*length(varNames)
results$nonLin[tt+ai] = nonLinTest$`Pr(>Chisq)`[2] #non lin better?
#results for this bootstrap sample only
results = data.frame('dependentVariable' = rep('A', 4*length(varNames)),
'age' = rep(0, 4*length(varNames)),
'sex' = rep(0, 4*length(varNames)),
'IQ' = rep(0, 4*length(varNames)),
'para' = rep(0, 4*length(varNames)),
'paranoia_gvif'= rep(0, 4*length(varNames)),
'para_p' = rep(0, 4*length(varNames)),
'age_b' = rep(0, 4*length(varNames)),
'sex_b' = rep(0, 4*length(varNames)),
'IQ_b' = rep(0, 4*length(varNames)),
'para_b' = rep(0, 4*length(varNames)),
'n' = rep(0, 4*length(varNames)),
'out' = rep(0, 4*length(varNames)),
'outlierFirst' = rep(0, 4*length(varNames)),
'eyeCon' = rep('a', 4*length(varNames)),
'diagGroup' = rep('a', 4*length(varNames)),
'dvMean' = rep(0, 4*length(varNames)),
'dvSD' = rep(0, 4*length(varNames)),
'nonLin' = rep(0, 4*length(varNames)))
results$nonLin[tt+ai] = nonLinTest$`Pr(>Chisq)`[2] #non lin better?
sink(file = "nul")
# Call gvif and store its output
vifTab <- gvif(curLM)  # Ensure to replace 'curLM' with your actual model variable
# Restore console output
sink()
ri = which(grepl('iv', rownames(vifTab)))
results$paranoia_gvif[tt+ai] = vifTab[ri,3]
results[tt+ai,1] = varNames[tt]
ei = which(row.names(aovTab) == 'Residuals')
ri = which(row.names(aovTab) == 'iv')
results$para[tt+ai] = aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
results$para_p[tt+ai] = aovTab$`Pr(>F)`[ri]
ri = which(row.names(aovTab) == 'sex')
results$sex[tt+ai] = aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
ri = which(row.names(aovTab) == 'IQ')
results$IQ[tt+ai] = aovTab$`Sum Sq`[ri] / (aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
ri = which(row.names(aovTab) == 'age')
results$age[tt+ai] = aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
ri = which(names(curLM$coefficients) == 'age')
results$age_b[tt+ai] = curLM$coefficients[[ri]]
curLM$coefficients
print(curLM$coefficients)
View(curLM)
ri = which(names(curLM$coefficients) == 'sexM')
results$sex_b[tt+ai] = curLM$coefficients[[ri]]
ri = which(names(curLM$coefficients) == 'IQ')
results$IQ_b[tt+ai] = curLM$coefficients[[ri]]
names(results)
View(results)
ri = which(names(curLM$coefficients) == 'iv')
results$para_b[tt+ai] = curLM$coefficients[[ri]]
View(modDat)
length(curDat[,1])-length(modDat$dv)
View(results)
diagGroups[jj]
getResults <- function(dat, varNames, eyeCons, diagGroups){
#results for this bootstrap sample only
results = data.frame('dependentVariable' = rep('A', 4*length(varNames)),
'age' = rep(0, 4*length(varNames)),
'sex' = rep(0, 4*length(varNames)),
'IQ' = rep(0, 4*length(varNames)),
'para' = rep(0, 4*length(varNames)),
'paranoia_gvif'= rep(0, 4*length(varNames)),
'para_p' = rep(0, 4*length(varNames)),
'age_b' = rep(0, 4*length(varNames)),
'sex_b' = rep(0, 4*length(varNames)),
'IQ_b' = rep(0, 4*length(varNames)),
'para_b' = rep(0, 4*length(varNames)),
'n' = rep(0, 4*length(varNames)),
'out' = rep(0, 4*length(varNames)),
'outlierFirst' = rep(0, 4*length(varNames)),
'eyeCon' = rep('a', 4*length(varNames)),
'diagGroup' = rep('a', 4*length(varNames)),
'dvMean' = rep(0, 4*length(varNames)),
'dvSD' = rep(0, 4*length(varNames)),
'nonLin' = rep(0, 4*length(varNames)))
for(ii in 1:length(eyeCons)){
for(jj in 1:length(diagGroups)){
#down select for eye condition and diag group
curDat = dat[dat$group == diagGroups[jj] & dat$eyes==eyeCons[ii], ]
if(diagGroups[jj] == 'CON'){
IV = curDat$par_total
} else {
IV = curDat$pos_p6
}
outliers = matrix(0,length(varNames), 2)
for(tt in 1:length(varNames)){
if(!grepl('PACmi', varNames[tt] ) & #skipping the non z-scored raw PAC values
!grepl('phase', varNames[tt])) { #skipping phase preferences of PAC
#### outlier removal ####
tmpOut <- getModDat(dat, IV, varNames, tt,  eyeCons, ii,
diagGroups, jj)
modDat <- tmpOut[[1]]
dat <- tmpOut[[2]]
#optional plot for this variable
# modelPlot(modDat, varNames, tt,  eyeCons, ii,
#           diagGroups, jj)
modDat$sex <- factor(modDat$sex, levels = c( "F","M"))
#fit multiple linear regression
curLM = lm(dv ~ age + sex + iv  +IQ , data = modDat)
#is a non-linear fit better for age?
curLM_nonLin = lm(dv~ age + I(age^2), data = modDat)
curLM_ageAlone = lm(dv~age, data = modDat)
nonLinTest = lrtest(curLM_ageAlone, curLM_nonLin)
if( nonLinTest$`Pr(>Chisq)`[2] <.05) { #use the non linear if it's better
curLM = lm(dv ~ age + sex + iv  +IQ + I(age^2), data = modDat)
}
aovTab = Anova(curLM, type = 3)
#adjust factor for storing results:
ai = ((ii-1)*2+(jj-1))*length(varNames)
results$nonLin[tt+ai] = nonLinTest$`Pr(>Chisq)`[2] #non lin better?
sink(file = "nul")
# Call gvif and store its output
vifTab <- gvif(curLM)  # Ensure to replace 'curLM' with your actual model variable
# Restore console output
sink()
ri = which(grepl('iv', rownames(vifTab)))
results$paranoia_gvif[tt+ai] = vifTab[ri,3]
results[tt+ai,1] = varNames[tt]
ei = which(row.names(aovTab) == 'Residuals')
ri = which(row.names(aovTab) == 'iv')
results$para[tt+ai] = aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
results$para_p[tt+ai] = aovTab$`Pr(>F)`[ri]
ri = which(row.names(aovTab) == 'sex')
results$sex[tt+ai] = aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
ri = which(row.names(aovTab) == 'IQ')
results$IQ[tt+ai] = aovTab$`Sum Sq`[ri] / (aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
ri = which(row.names(aovTab) == 'age')
results$age[tt+ai] = aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
ri = which(names(curLM$coefficients) == 'age')
results$age_b[tt+ai] = curLM$coefficients[[ri]]
ri = which(names(curLM$coefficients) == 'sexM')
results$sex_b[tt+ai] = curLM$coefficients[[ri]]
ri = which(names(curLM$coefficients) == 'IQ')
results$IQ_b[tt+ai] = curLM$coefficients[[ri]]
ri = which(names(curLM$coefficients) == 'iv')
results$para_b[tt+ai] = curLM$coefficients[[ri]]
results$n[tt+ai] = length(modDat[,1])
results$out[tt+ai] = length(curDat[,1])-length(modDat$dv)
results$dvMean[tt+ai] = modDat$dv_mean[1]
results$eyeCon[tt+ai] = eyeCons[ii]
results$diagGroup[tt+ai] = diagGroups[jj]
results$dvSD[tt+ai] = modDat$dv_sd[1]
}
}
}
}
results <- results %>% filter(dependentVariable != 'A')
results$type = 'A'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('pow', x, ignore.case = T))] = 'power'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('slope', x, ignore.case = T))] = 'slope'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('relalpha', x, ignore.case = T) |
grepl('logalpha', x, ignore.case = T))] = 'alpha'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('sampEnt', x, ignore.case = T))] = 'sampEnt'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('ispc', x, ignore.case = T))] = 'ispc'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('PAC', x, ignore.case = T))] = 'PAC'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('phase', x, ignore.case = T))] = 'phase'
return(list(results, dat))
}
varNames = varNames[1:10]
results <- getResults(dat, varNames, eyeCons, diagGroups)
test <- read.csv(paste(path, "combinedEEG_surveyData.csv", sep = ''))
sexDat <- read.csv(paste(path, "autismBiomarkersAllData2.csv", sep = ''))
sexDat <- sexDat %>% select(c('sex', 'key'))
test <- merge(test, sexDat)
test$nbChanOrig[test$nbChanOrig==999] = 124 #due to a data import error, less than 10 participants had their nbChanOrig values missing
dat <- filter(test, group %in% c('CON', 'SZ'))
dat <- filter(dat, nbChanOrig>20)
dat <- filter(dat, nbChanFinal/nbChanOrig >= .5)
dat %>% ggplot(aes(x = age/12)) + geom_histogram()
varNames = names(dat)[20:1179]
eyeCons = c('open', 'closed')
diagGroups = c('CON', 'SZ')
#get a total paranoia score to be used with controls:
dat$par_total = dat$par00a1 + dat$par00a2 + dat$par00a3 + dat$par00a4 +
dat$par00a5 + dat$par00a6 + dat$par00a7
varNames = varNames[1:10]
#results for this bootstrap sample only
results = data.frame('dependentVariable' = rep('A', 4*length(varNames)),
'age' = rep(0, 4*length(varNames)),
'sex' = rep(0, 4*length(varNames)),
'IQ' = rep(0, 4*length(varNames)),
'para' = rep(0, 4*length(varNames)),
'paranoia_gvif'= rep(0, 4*length(varNames)),
'para_p' = rep(0, 4*length(varNames)),
'age_b' = rep(0, 4*length(varNames)),
'sex_b' = rep(0, 4*length(varNames)),
'IQ_b' = rep(0, 4*length(varNames)),
'para_b' = rep(0, 4*length(varNames)),
'n' = rep(0, 4*length(varNames)),
'out' = rep(0, 4*length(varNames)),
'outlierFirst' = rep(0, 4*length(varNames)),
'eyeCon' = rep('a', 4*length(varNames)),
'diagGroup' = rep('a', 4*length(varNames)),
'dvMean' = rep(0, 4*length(varNames)),
'dvSD' = rep(0, 4*length(varNames)),
'nonLin' = rep(0, 4*length(varNames)))
for(ii in 1:length(eyeCons)){
for(jj in 1:length(diagGroups)){
#down select for eye condition and diag group
curDat = dat[dat$group == diagGroups[jj] & dat$eyes==eyeCons[ii], ]
if(diagGroups[jj] == 'CON'){
IV = curDat$par_total
} else {
IV = curDat$pos_p6
}
outliers = matrix(0,length(varNames), 2)
for(tt in 1:length(varNames)){
if(!grepl('PACmi', varNames[tt] ) & #skipping the non z-scored raw PAC values
!grepl('phase', varNames[tt])) { #skipping phase preferences of PAC
#### outlier removal ####
tmpOut <- getModDat(dat, IV, varNames, tt,  eyeCons, ii,
diagGroups, jj)
modDat <- tmpOut[[1]]
dat <- tmpOut[[2]]
#optional plot for this variable
# modelPlot(modDat, varNames, tt,  eyeCons, ii,
#           diagGroups, jj)
modDat$sex <- factor(modDat$sex, levels = c( "F","M"))
#fit multiple linear regression
curLM = lm(dv ~ age + sex + iv  +IQ , data = modDat)
#is a non-linear fit better for age?
curLM_nonLin = lm(dv~ age + I(age^2), data = modDat)
curLM_ageAlone = lm(dv~age, data = modDat)
nonLinTest = lrtest(curLM_ageAlone, curLM_nonLin)
if( nonLinTest$`Pr(>Chisq)`[2] <.05) { #use the non linear if it's better
curLM = lm(dv ~ age + sex + iv  +IQ + I(age^2), data = modDat)
}
aovTab = Anova(curLM, type = 3)
#adjust factor for storing results:
ai = ((ii-1)*2+(jj-1))*length(varNames)
results$nonLin[tt+ai] = nonLinTest$`Pr(>Chisq)`[2] #non lin better?
sink(file = "nul")
# Call gvif and store its output
vifTab <- gvif(curLM)  # Ensure to replace 'curLM' with your actual model variable
# Restore console output
sink()
ri = which(grepl('iv', rownames(vifTab)))
results$paranoia_gvif[tt+ai] = vifTab[ri,3]
results[tt+ai,1] = varNames[tt]
ei = which(row.names(aovTab) == 'Residuals')
ri = which(row.names(aovTab) == 'iv')
results$para[tt+ai] = aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
results$para_p[tt+ai] = aovTab$`Pr(>F)`[ri]
ri = which(row.names(aovTab) == 'sex')
results$sex[tt+ai] = aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
ri = which(row.names(aovTab) == 'IQ')
results$IQ[tt+ai] = aovTab$`Sum Sq`[ri] / (aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
ri = which(row.names(aovTab) == 'age')
results$age[tt+ai] = aovTab$`Sum Sq`[ri] /
(aovTab$`Sum Sq`[ri] + aovTab$`Sum Sq`[ei])
ri = which(names(curLM$coefficients) == 'age')
results$age_b[tt+ai] = curLM$coefficients[[ri]]
ri = which(names(curLM$coefficients) == 'sexM')
results$sex_b[tt+ai] = curLM$coefficients[[ri]]
ri = which(names(curLM$coefficients) == 'IQ')
results$IQ_b[tt+ai] = curLM$coefficients[[ri]]
ri = which(names(curLM$coefficients) == 'iv')
results$para_b[tt+ai] = curLM$coefficients[[ri]]
results$n[tt+ai] = length(modDat[,1])
results$out[tt+ai] = length(curDat[,1])-length(modDat$dv)
results$dvMean[tt+ai] = modDat$dv_mean[1]
results$eyeCon[tt+ai] = eyeCons[ii]
results$diagGroup[tt+ai] = diagGroups[jj]
results$dvSD[tt+ai] = modDat$dv_sd[1]
}
}
}
}
results <- results %>% filter(dependentVariable != 'A')
results$type = 'A'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('pow', x, ignore.case = T))] = 'power'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('slope', x, ignore.case = T))] = 'slope'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('relalpha', x, ignore.case = T) |
grepl('logalpha', x, ignore.case = T))] = 'alpha'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('sampEnt', x, ignore.case = T))] = 'sampEnt'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('ispc', x, ignore.case = T))] = 'ispc'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('PAC', x, ignore.case = T))] = 'PAC'
results$type[apply(as.matrix(results$dependentVariable),
1, function(x) grepl('phase', x, ignore.case = T))] = 'phase'
View(results)
results <- getResults(dat, varNames, eyeCons, diagGroups)
path = "G:\\My Drive\\GitHub\\MartinezDedeSZ\\"
figPath = "G:\\My Drive\\Milne\\pubFigPanels\\"
test <- read.csv(paste(path, "combinedEEG_surveyData.csv", sep = ''))
sexDat <- read.csv(paste(path, "autismBiomarkersAllData2.csv", sep = ''))
sexDat <- sexDat %>% select(c('sex', 'key'))
test <- merge(test, sexDat)
test$nbChanOrig[test$nbChanOrig==999] = 124 #due to a data import error, less than 10 participants had their nbChanOrig values missing
dat <- filter(test, group %in% c('CON', 'SZ'))
dat <- filter(dat, nbChanOrig>20)
dat <- filter(dat, nbChanFinal/nbChanOrig >= .5)
dat %>% ggplot(aes(x = age/12)) + geom_histogram()
varNames = names(dat)[20:1179]
eyeCons = c('open', 'closed')
diagGroups = c('CON', 'SZ')
#get a total paranoia score to be used with controls:
dat$par_total = dat$par00a1 + dat$par00a2 + dat$par00a3 + dat$par00a4 +
dat$par00a5 + dat$par00a6 + dat$par00a7
print(paste(eyeCons[ii], diagGroups[jj], tt))
library(tidyverse)
library(lme4)
library(lmerTest)
library(kableExtra)
repoPath = "G:/My Drive/GitHub/imageAB_submission"
setwd(repoPath)
source('AB_pic_helperFuncs.R')
#data file path for experiment 1 data:
datFilePath = paste(getwd(), '/Exp1_rawData', sep = '')
#import the data as a list of data.frames
allDat = readCCdat(datFilePath)
df = allDat[[2]]
allDat = allDat[[1]]
setwd(paste0(repoPath, '/Figs'))
##############    Figure 2b        #######################################
#function plots the T2|T1 proportion across lags averaged over participants
#and also adds summary variables to the dataframe at the participant level
df = plotBasicAB(allDat, df,3)
#extract the T2|T1 data from the data frame to ready for plotting at the
#participant level
plotDat <- df[,grepl( 'T2.T1',colnames(df))]
plotDat$subID <- seq(1,length(plotDat[,1]), 1)
plotDat <- plotDat %>%
pivot_longer(cols = starts_with('lag'),
names_to = "lag",
values_to = "value")
meanVals <- plotDat %>%
group_by(lag) %>%
summarise(mean_lag = mean(value),
ste_lag = sd(value)/sqrt(13) * qt(.975, 13))
meanVals$subID = 99
xVals = unique(plotDat$lag)
plotDat %>% ggplot(aes(x=lag, y=value, group = subID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('1','2','3','4','5','6','7')) +
scale_y_continuous(breaks = seq(.2, 1.0, .1), limits = c(.2,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= lag, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= lag, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=lag, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('T2 detection p(T2|T1)')
#apply linear mixed effects model
anova_result <- lmer(value ~ lag + (1 | subID), data = plotDat)
anova(anova_result)
####      Figure 2a #######################################################
# T1 detection accuracy
plotDat <- df[,!grepl( 'T2.T1',colnames(df)) & grepl('T1',colnames(df))]
plotDat$subID <- seq(1,length(plotDat[,1]), 1)
plotDat <- plotDat %>%
pivot_longer(cols = starts_with('lag'),
names_to = "lag",
values_to = "value")
meanVals <- plotDat %>%
group_by(lag) %>%
summarise(mean_lag = mean(value),
ste_lag = sd(value)/sqrt(13) * qt(.975, 13))
meanVals$subID = 99
xVals = unique(plotDat$lag)
plotDat %>% ggplot(aes(x=lag, y=value, group = subID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('1','2','3','4','5','6','7')) +
scale_y_continuous(breaks = seq(.2, 1.0, .1), limits = c(.2,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= lag, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= lag, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=lag, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('T2 detection p(T2|T1)')
#linear mixed effects model
anova_result <- lmer(value ~ lag + (1 | subID), data = plotDat)
anova(anova_result)
#I want the ending stim presentation time
df$stimTim = unlist(lapply(allDat, function(x) x$curStimTim[240]))
print(paste0('the mean ending stim presentation time was: ', round(mean(df$stimTim),2)))
#hard code to average over different T1 measures at different lags
df$allT1 = rowMeans(df[,seq(6,26,3)])
####    main task design Table                   ####
mainDesign = data.frame('Lag' = c(1,5),
'Both Targets' = c('84 (84)', '84 (50)'),
'T1 Only' = c('28 (0)', '28 (0)'),
'T2 Only' = c('28', '28'),
'No Target' = c('10', '10'))
mainDesign %>%
kbl(align = 'c') %>%
kable_classic(full_width = F,
font_size = 20) %>%
column_spec(1, border_right = T) %>%
row_spec(1, align = 'c')%>%
footnote(general = "Number of trials presented during the AB task. Parenthetical numbers indicate the subset of T1 items subsequently presented during the memory test.",
general_title = "Table 1: ",
footnote_as_chunk = T, title_format = c("italic", "underline")
)
#### Experiment 2 plotting and final analysis #################################
#NOTE: summary variables were extracted using python
#see notebook: ABmemNotebook.ipynb
#also see helper python functions: AB_mem_helper_funcs.py
#bring in the data for the new version of the experiment:
df = read.csv(paste0(repoPath, '/Exp2Summary.csv'))
#implement criterion 1:
df = df[df$ABT1overall>.5, ]
#implement criterion 2:
df = df[df$TargALL_UVSD_d >.1, ]
#implement criterion 3:
df = df[df$Lag5_T1P_T2P_T2>.5, ]
sum(df$DistALL_UVSD_x>18.3)
sum(df$Dist_UVSD_x>31.4)
ABmainTable = data.frame('Targets' = c('Both', 'Both', 'T1', 'T1', 'T2', 'T2', 'Neither', 'Neither'),
'Lag'     = rep(c(1,5), 4),
'T1'      = rep(".", 8),
'T2'      = rep(".", 8),
'T2_T1'   = rep(".", 8))
lags = c('Lag1', 'Lag5')
presAbs = c('P', 'A')
ti = 1
for(t1p in 1:2){
for(t2p in 1:2){
for(L in 1:2){
T1Vals = df[[paste(lags[L],'_T1',presAbs[t1p],'_T2',presAbs[t2p],'_T1', sep="")]]
T2Vals = df[[paste(lags[L],'_T1',presAbs[t1p],'_T2',presAbs[t2p],'_T2', sep="")]]
T2_T1Vals = df[[paste(lags[L],'_T1',presAbs[t1p],'_T2',presAbs[t2p],'_T2_T1', sep="")]]
ABmainTable$T1[ti] = paste(as.character(round(mean(T1Vals), 2)), ' (',
as.character(round(sd(T1Vals), 2)), ')', sep="")
ABmainTable$T2[ti] = paste(as.character(round(mean(T2Vals), 2)), ' (',
as.character(round(sd(T2Vals), 2)), ')', sep="")
ABmainTable$T2_T1[ti] = paste(as.character(round(mean(T2_T1Vals), 2)), ' (',
as.character(round(sd(T2_T1Vals), 2)), ')', sep="")
ti = ti+1
}
}
}
ABmainTable %>%
kbl(align = 'c') %>%
kable_classic(full_width = F,
font_size = 20) %>%
column_spec(2, border_right = T) %>%
row_spec(1, align = 'c')%>%
footnote(general = "Accuracy and (standard deviation) for different trial types for T1, T2, and T2|T1 ",
general_title = "Table 2: ",
footnote_as_chunk = T, title_format = c("italic", "underline")
)
plotDat <- df[,c("Lag1_T1P_T2P_T1", "Lag5_T1P_T2P_T1")]
plotDat$subID <- seq(1,length(plotDat[,1]), 1)
plotDat <- plotDat %>%
pivot_longer(cols = starts_with('lag'),
names_to = "lag",
values_to = "value")
meanVals <- plotDat %>%
group_by(lag) %>%
summarise(mean_lag = mean(value),
ste_lag = sd(value)/sqrt(46)* qt(.975, 46))
meanVals$subID = 99
xVals = unique(plotDat$lag)
plotDat %>% ggplot(aes(x=lag, y=value, group = subID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('1','5')) +
scale_y_continuous(breaks = seq(.4, 1.0, .1), limits = c(.4,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= lag, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= lag, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=lag, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('T1 detection p(T1)')
View(plotDat)
lag.lm = lmer(value ~ lag + (1|subID), data= plotDat)
summary(lag.lm)
t.test(df$Lag1_T1P_T2P_T1 - df$Lag5_T1P_T2P_T1)
