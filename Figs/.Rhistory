sTypes = c('lag1S', 'lag5S', 'oldS', 'new')
for(blk in 1:length(memBlocks)){
dat = subDat[[memBlocks[blk]]]
if(dat$dualTarget[1]){ #this is a dual target block!
types = dTypes
for(tt in 1:length(types)){
for(cc in 1:numConf){
if(types[tt]=='lag1D'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink'] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']
}
if(types[tt]=='blink'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink']
}
if(types[tt]=='noBlink'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']
}
if(types[tt]=='lag5D'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='lag5']
}
if(types[tt]=='oldD'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink'] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']+
dat$count[dat$conf==cc & dat$trialType=='lag5']
}
if(types[tt]=='new'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='novel']
}
}
}
}else{ #this is a single target block
types = sTypes
for(tt in 1:length(types)){
for(cc in 1:numConf){
if(types[tt]=='lag1S'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink'] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']
}
if(types[tt]=='lag5S'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='lag5']
}
if(types[tt]=='oldS'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='blink'] +
dat$count[dat$conf==cc & dat$trialType=='noBlink']+
dat$count[dat$conf==cc & dat$trialType=='lag5']
}
if(types[tt]=='new'){
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] =
allConf$count[allConf$conf==cc & allConf$trialType==types[tt]] +
dat$count[dat$conf==cc & dat$trialType=='novel']
}
}
}
}
}
#fit most granular version of model:
# uvsdDETAIL = allConf %>% filter(trialType != 'oldS', trialType != 'oldD',
#                                 trialType != 'lag1D') %>%
#   fitUVSD()
uvsdDETAIL = allConf %>% filter(trialType == 'blink' |
trialType == 'noBlink' |
trialType == 'new') %>%
fitUVSD()
#fit medium version of model:
uvsdMID = allConf %>% filter(trialType != 'oldS' & trialType != 'oldD' &
trialType != 'blink', trialType != 'noBlink') %>%
fitUVSD()
#fit basic version of model:
uvsdBASIC = allConf %>% filter(trialType == 'oldS' | trialType == 'oldD' |
trialType == 'new') %>%
fitUVSD()
test[[1]][1,'detail_chi'] = uvsdDETAIL$chi
test[[1]][1,'detail_chiP'] = uvsdDETAIL$chiP
test[[1]][1,'mid_chi'] = uvsdMID$chi
test[[1]][1,'mid_chiP'] = uvsdMID$chiP
test[[1]][1,'basic_chi'] = uvsdBASIC$chi
test[[1]][1,'basic_chiP'] = uvsdBASIC$chiP
test[[1]][1,'dualLag1_d'] = uvsdMID$lag1D_d
test[[1]][1,'dualLag5_d'] = uvsdMID$lag5D_d
test[[1]][1,'dualLag1_s'] = uvsdMID$lag1D_s
test[[1]][1,'dualLag5_s'] = uvsdMID$lag5D_s
test[[1]][1,'dualLag1_acc'] = sum(allConf$count[allConf$conf>3 & allConf$trialType=='lag1D']) /
sum(allConf$count[allConf$trialType=='lag1D'])
test[[1]][1,'dualLag1_count'] = sum(allConf$count[allConf$trialType=='lag1D'])
test[[1]][1,'dualLag5_acc'] = sum(allConf$count[allConf$conf>3 & allConf$trialType=='lag5D']) /
sum(allConf$count[allConf$trialType=='lag5D'])
test[[1]][1,'dualLag5_count'] = sum(allConf$count[allConf$trialType=='lag5D'])
if("blink_d" %in% names(uvsdDETAIL)){
test[[1]][1,'blink_d'] = uvsdDETAIL$blink_d
test[[1]][1,'blink_s'] = uvsdDETAIL$blink_s
test[[1]][1,'blink_acc'] = sum(allConf$count[allConf$conf>3 & allConf$trialType=='blink']) /
sum(allConf$count[allConf$trialType=='blink'])
test[[1]][1,'blink_count'] = sum(allConf$count[allConf$trialType=='blink'])
} else {
test[[1]][1,'blink_d'] = NA
test[[1]][1,'blink_s'] = NA
test[[1]][1,'blink_acc'] = NA
test[[1]][1,'blink_count'] = NA
}
if("noBlink_d" %in% names(uvsdDETAIL)){
test[[1]][1,'noBlink_d'] = uvsdDETAIL$noBlink_d
test[[1]][1,'noBlink_s'] = uvsdDETAIL$noBlink_s
test[[1]][1,'noBlink_acc'] = sum(allConf$count[allConf$conf>3 & allConf$trialType=='noBlink']) /
sum(allConf$count[allConf$trialType=='noBlink'])
test[[1]][1,'noBlink_count'] = sum(allConf$count[allConf$trialType=='noBlink'])
} else {
test[[1]][1,'noBlink_d'] = NA
test[[1]][1,'noBlink_s'] = NA
test[[1]][1,'noBlink_acc'] = NA
test[[1]][1,'noBlink_count'] = NA
}
test[[1]][1,'singleLag1_d'] = uvsdMID$lag1S_d
test[[1]][1,'singleLag5_d'] = uvsdMID$lag5S_d
test[[1]][1,'singleLag1_s'] = uvsdMID$lag1S_s
test[[1]][1,'singleLag5_s'] = uvsdMID$lag5S_s
test[[1]][1,'singleLag1_acc'] = sum(allConf$count[allConf$conf>3 & allConf$trialType=='lag1S']) /
sum(allConf$count[allConf$trialType=='lag1S'])
test[[1]][1,'singleLag5_acc'] = sum(allConf$count[allConf$conf>3 & allConf$trialType=='lag5S']) /
sum(allConf$count[allConf$trialType=='lag5S'])
test[[1]][1,'singleLag1_count'] = sum(allConf$count[allConf$trialType=='lag1S'])
test[[1]][1,'singleLag5_count'] = sum(allConf$count[allConf$trialType=='lag5S'])
test[[1]][1, 'dual_d'] = uvsdBASIC$oldD_d
test[[1]][1, 'single_d'] = uvsdBASIC$oldS_d
test[[1]][1, 'dual_s'] = uvsdBASIC$oldD_s
test[[1]][1, 'single_s'] = uvsdBASIC$oldS_s
test[[1]][1,'dual_acc'] = sum(allConf$count[allConf$conf>3 & allConf$trialType=='oldD']) /
sum(allConf$count[allConf$trialType=='oldD'])
test[[1]][1,'single_acc'] = sum(allConf$count[allConf$conf>3 & allConf$trialType=='oldS']) /
sum(allConf$count[allConf$trialType=='oldS'])
test[[1]][1,'dual_count'] = sum(allConf$count[allConf$trialType=='oldD'])
test[[1]][1,'single_count'] = sum(allConf$count[allConf$trialType=='oldS'])
test[[1]][1, 'novel_d'] = 0
test[[1]][1, 'novel_s'] = 1
test[[1]][1,'novel_acc'] = sum(allConf$count[allConf$conf<=3 & allConf$trialType=='new']) /
sum(allConf$count[allConf$trialType=='new'])
test[[1]][1,'novel_count'] = sum(allConf$count[allConf$trialType=='new'])
confTypes = unique(allConf$trialType)
for(curType in confTypes){
tmpConf = allConf %>% filter(trialType == curType)
for(ratingi in 1:numConf){
test[[1]][1, paste0(curType, ratingi)] = tmpConf$count[ratingi] /
sum(tmpConf$count)
}
}
GrandConf$count = GrandConf$count + allConf$count
plotDat <- allConf %>% group_by(trialType) %>%
reframe(prop = count / sum(count), conf = conf)
outPlot <- ggplot(plotDat, aes(x = conf, y = prop, color = trialType, fill = trialType)) +
geom_bar(stat = 'identity', position = 'dodge')+
ggtitle(paste(test[[1]]$ID, 'allData'))
png(paste(figsOut, '\\allConf_ConfRatings_', test[[1]]$ID, '.png',sep=''),         # File name
width=1024, height=768)
print(outPlot)
dev.off()
subSums = rbind(subSums, test[[1]])
print(paste(test[[1]]$ID, sum(test[[1]][grepl('pnts', names(subSums))])/250))
payments = rbind(payments, data.frame('ID' = test[[1]]$ID, 'bonus' = sum(test[[1]][grepl('pnts', names(subSums))])/250))
} else {
payments = rbind(payments, data.frame('ID' = test[[1]]$ID, 'bonus' = 99999))
}
}
demoInfo <- subSums %>% select(ID, date, age, sex, nativeLang)
plot(subSums$singleLag1_d, oldSubSums$singleLag1_d)
##########  get the AB mag overall ####################################
subSums$ABmag = rowMeans(subSums[,grepl("AB_lag1_T2T1", names(subSums)) &
!grepl("prac", names(subSums))] -
subSums[,grepl("AB_lag5_T2T1", names(subSums)) &
!grepl("prac", names(subSums))],
na.rm = T)
##########       AB mag blockwise #####################################
for( ii in c(1,3,5)){
subSums[,paste0('ABmag_', ii)] = subSums[,paste0(ii,"_AB_lag1_T2T1")] -
subSums[,paste0(ii,"_AB_lag5_T2T1")]
}
subSums_long <- subSums %>%
pivot_longer(cols = c('ABmag_1', 'ABmag_3', 'ABmag_5'),
names_to = 'block', values_to = 'new_ABmag')
subSums_long %>% ggplot(aes(x = block, y = new_ABmag, group = ID)) + geom_line()
ggplot(subSums, aes(x = singleLag1_d, y = ABmag)) + geom_point(size = 5) +
geom_smooth(method = "lm", se = T, color = 'black') +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20))
cor.test(subSums$ABmag, subSums$singleLag1_d)
#### considering lag X target interactions ###################################
plotDat <- subSums[,c("ID", "dualLag1_d", "singleLag1_d", 'dualLag5_d',
'singleLag5_d', "ABmag")] %>%
pivot_longer(cols = ends_with("_d"),
names_to = c("target", 'lag'),
names_pattern = "(single|dual)(Lag1|Lag5)_d",
values_to = "d")
lagCond.lm = lmer(d~target*lag + (1|ID), data = plotDat)
summary(lagCond.lm)
t.test(plotDat$d[plotDat$target=='dual'& plotDat$lag == 'Lag1']-
plotDat$d[plotDat$target =='single'& plotDat$lag == 'Lag1'])
t.test(plotDat$d[plotDat$target=='dual'& plotDat$lag == 'Lag5']-
plotDat$d[plotDat$target =='single'& plotDat$lag == 'Lag5'])
t.test(plotDat$d[plotDat$target=='single'& plotDat$lag == 'Lag1']-
plotDat$d[plotDat$target =='single'& plotDat$lag == 'Lag5'])
sum(plotDat$d[plotDat$target=='single'& plotDat$lag == 'Lag1']<
plotDat$d[plotDat$target =='single'& plotDat$lag == 'Lag5'])
7/19
wilcox.test(plotDat$d[plotDat$target=='dual']-plotDat$d[plotDat$target =='single'])
wilcox.test(plotDat$d[plotDat$target=='single'& plotDat$lag == 'Lag1']-
plotDat$d[plotDat$target =='single'& plotDat$lag == 'Lag5'])
hist(plotDat$d[plotDat$target=='single'& plotDat$lag == 'Lag1']-
plotDat$d[plotDat$target =='single'& plotDat$lag == 'Lag5'])
t.test(plotDat$d[plotDat$target=='single'& plotDat$lag == 'Lag1']-
plotDat$d[plotDat$target =='single'& plotDat$lag == 'Lag5'])
sum(plotDat$d[plotDat$target=='single'& plotDat$lag == 'Lag1']>
plotDat$d[plotDat$target =='single'& plotDat$lag == 'Lag5'])
library(tidyverse)
library(lme4)
library(lmerTest)
library(kableExtra)
repoPath = "G:/My Drive/GitHub/imageAB_submission"
setwd(repoPath)
source('AB_pic_helperFuncs.R')
#data file path for experiment 1 data:
datFilePath = paste(getwd(), '/exp1', sep = '')
#import the data as a list of data.frames
allDat = readCCdat(datFilePath)
file.exists(datFilePath)
datFilePath
#data file path for experiment 1 data:
datFilePath = paste(getwd(), '/Exp1_rawData', sep = '')
#import the data as a list of data.frames
allDat = readCCdat(datFilePath)
df = allDat[[2]]
allDat = allDat[[1]]
setwd(paste0(repoPath, '/Figs'))
##############    Figure 2b        #######################################
#function plots the T2|T1 proportion across lags averaged over participants
#and also adds summary variables to the dataframe at the participant level
df = plotBasicAB(allDat, df,3)
#extract the T2|T1 data from the data frame to ready for plotting at the
#participant level
plotDat <- df[,grepl( 'T2.T1',colnames(df))]
plotDat$subID <- seq(1,length(plotDat[,1]), 1)
plotDat <- plotDat %>%
pivot_longer(cols = starts_with('lag'),
names_to = "lag",
values_to = "value")
meanVals <- plotDat %>%
group_by(lag) %>%
summarise(mean_lag = mean(value),
ste_lag = sd(value)/sqrt(13) * qt(.975, 13))
meanVals$subID = 99
xVals = unique(plotDat$lag)
plotDat %>% ggplot(aes(x=lag, y=value, group = subID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('1','2','3','4','5','6','7')) +
scale_y_continuous(breaks = seq(.2, 1.0, .1), limits = c(.2,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= lag, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= lag, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=lag, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('T2 detection p(T2|T1)')
#apply linear mixed effects model
anova_result <- lmer(value ~ lag + (1 | subID), data = plotDat)
anova(anova_result)
####      Figure 2a #######################################################
# T1 detection accuracy
plotDat <- df[,!grepl( 'T2.T1',colnames(df)) & grepl('T1',colnames(df))]
plotDat$subID <- seq(1,length(plotDat[,1]), 1)
plotDat <- plotDat %>%
pivot_longer(cols = starts_with('lag'),
names_to = "lag",
values_to = "value")
meanVals <- plotDat %>%
group_by(lag) %>%
summarise(mean_lag = mean(value),
ste_lag = sd(value)/sqrt(13) * qt(.975, 13))
meanVals$subID = 99
xVals = unique(plotDat$lag)
plotDat %>% ggplot(aes(x=lag, y=value, group = subID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('1','2','3','4','5','6','7')) +
scale_y_continuous(breaks = seq(.2, 1.0, .1), limits = c(.2,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= lag, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= lag, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=lag, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('T2 detection p(T2|T1)')
#linear mixed effects model
anova_result <- lmer(value ~ lag + (1 | subID), data = plotDat)
anova(anova_result)
#I want the ending stim presentation time
df$stimTim = unlist(lapply(allDat, function(x) x$curStimTim[240]))
print(paste0('the mean ending stim presentation time was: ', round(mean(df$stimTim),2)))
unlist(lapply(allDat, function(x) x$curStimTim[240]))
#### Experiment 2 plotting and final analysis #################################
#NOTE: summary variables were extracted using python
#see notebook: ABmemNotebook.ipynb
#also see helper python functions: AB_mem_helper_funcs.py
#bring in the data for the new version of the experiment:
df = read.csv(paste0(repoPath, '/Exp2Summary.csv'))
#implement criterion 1:
df = df[df$ABT1overall>.5, ]
#implement criterion 2:
df = df[df$TargALL_UVSD_d >.1, ]
#implement criterion 3:
df = df[df$Lag5_T1P_T2P_T2>.5, ]
sum(df$DistALL_UVSD_x>18.3)
sum(df$Dist_UVSD_x>31.4)
ABmainTable = data.frame('Targets' = c('Both', 'Both', 'T1', 'T1', 'T2', 'T2', 'Neither', 'Neither'),
'Lag'     = rep(c(1,5), 4),
'T1'      = rep(".", 8),
'T2'      = rep(".", 8),
'T2_T1'   = rep(".", 8))
lags = c('Lag1', 'Lag5')
presAbs = c('P', 'A')
ti = 1
for(t1p in 1:2){
for(t2p in 1:2){
for(L in 1:2){
T1Vals = df[[paste(lags[L],'_T1',presAbs[t1p],'_T2',presAbs[t2p],'_T1', sep="")]]
T2Vals = df[[paste(lags[L],'_T1',presAbs[t1p],'_T2',presAbs[t2p],'_T2', sep="")]]
T2_T1Vals = df[[paste(lags[L],'_T1',presAbs[t1p],'_T2',presAbs[t2p],'_T2_T1', sep="")]]
ABmainTable$T1[ti] = paste(as.character(round(mean(T1Vals), 2)), ' (',
as.character(round(sd(T1Vals), 2)), ')', sep="")
ABmainTable$T2[ti] = paste(as.character(round(mean(T2Vals), 2)), ' (',
as.character(round(sd(T2Vals), 2)), ')', sep="")
ABmainTable$T2_T1[ti] = paste(as.character(round(mean(T2_T1Vals), 2)), ' (',
as.character(round(sd(T2_T1Vals), 2)), ')', sep="")
ti = ti+1
}
}
}
ABmainTable %>%
kbl(align = 'c') %>%
kable_classic(full_width = F,
font_size = 20) %>%
column_spec(2, border_right = T) %>%
row_spec(1, align = 'c')%>%
footnote(general = "Accuracy and (standard deviation) for different trial types for T1, T2, and T2|T1 ",
general_title = "Table 2: ",
footnote_as_chunk = T, title_format = c("italic", "underline")
)
plotDat <- df[,c("Lag1_T1P_T2P_T1", "Lag5_T1P_T2P_T1")]
plotDat$subID <- seq(1,length(plotDat[,1]), 1)
plotDat <- plotDat %>%
pivot_longer(cols = starts_with('lag'),
names_to = "lag",
values_to = "value")
meanVals <- plotDat %>%
group_by(lag) %>%
summarise(mean_lag = mean(value),
ste_lag = sd(value)/sqrt(46)* qt(.975, 46))
meanVals$subID = 99
xVals = unique(plotDat$lag)
plotDat %>% ggplot(aes(x=lag, y=value, group = subID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('1','5')) +
scale_y_continuous(breaks = seq(.4, 1.0, .1), limits = c(.4,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= lag, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= lag, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=lag, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('T1 detection p(T1)')
t.test(df$Lag1_T1P_T2P_T1 - df$Lag5_T1P_T2P_T1)
plotDat <- df[,c("Lag1_T1P_T2P_T2_T1", "Lag5_T1P_T2P_T2_T1")]
plotDat$subID <- seq(1,length(plotDat[,1]), 1)
plotDat <- plotDat %>%
pivot_longer(cols = starts_with('lag'),
names_to = "lag",
values_to = "value")
meanVals <- plotDat %>%
group_by(lag) %>%
summarise(mean_lag = mean(value),
ste_lag = sd(value)/sqrt(46)* qt(.975, 46))
meanVals$subID = 99
xVals = unique(plotDat$lag)
plotDat %>% ggplot(aes(x=lag, y=value, group = subID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('1','5')) +
scale_y_continuous(breaks = seq(.2, 1.0, .1), limits = c(.2,1)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
geom_line(data = meanVals, aes(x= lag, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= lag, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=lag, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab('T2 detection p(T2|T1)')
t.test(df$Lag1_T1P_T2P_T2_T1 - df$Lag5_T1P_T2P_T2_T1)
#### memory for targets versus distractors #######################################################
plotDat <- df[,c("DistALL_UVSD_d", "TargALL_UVSD_d")]
plotDat$subID <- seq(1,length(plotDat[,1]), 1)
plotDat <- plotDat %>%
pivot_longer(cols = ends_with('_d'),
names_to = "type",
values_to = "value")
meanVals <- plotDat %>%
group_by(type) %>%
summarise(mean_lag = mean(value),
ste_lag = sd(value)/sqrt(46) * qt(.975, 46))
meanVals$subID = 99
plotDat %>% ggplot(aes(x=type, y=value, group = subID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('AB distractors','AB targets')) +
scale_y_continuous(breaks = seq(0, 3.0, .5), limits = c(0,3)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
# geom_line(data = meanVals, aes(x= type, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= type, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=type, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab("memory performance (d')")
#evaluating output from 3 distribution model
t.test(df$DistALL_UVSD_d - df$TargALL_UVSD_d)
#### Compare memory for blink, non-blink, and lag 5 targets #######################################################
plotDat <- df[,c("L1blink_UVSD_d", "L1cor_UVSD_d", "L5_UVSD_d")]
plotDat$subID <- seq(1,length(plotDat[,1]), 1)
plotDat <- plotDat %>%
pivot_longer(cols = ends_with('_d'),
names_to = "type",
values_to = "value")
meanVals <- plotDat %>%
group_by(type) %>%
summarise(mean_lag = mean(value),
ste_lag = sd(value)/sqrt(46) * qt(.975, 46))
meanVals$subID = 99
plotDat %>% ggplot(aes(x=type, y=value, group = subID)) +
geom_line( position = position_dodge(.2), size = 1, alpha = .15) +
geom_point( position = position_dodge(.2)) +
scale_x_discrete(labels = c('AB blink','AB no blink', 'lag 5')) +
scale_y_continuous(breaks = seq(0, 3.0, .5), limits = c(0,3)) +
theme_classic() +
theme(axis.line = element_line(color = 'black', size = 3),
axis.ticks = element_line(colour = "black", size = 2),
axis.ticks.length=unit(-.25, "cm"),
text = element_text(size = 20)) +
# geom_line(data = meanVals, aes(x= type, y = mean_lag), linewidth = 4) +
geom_point(data = meanVals, aes(x= type, y = mean_lag), size = 10) +
geom_errorbar(data = meanVals, aes(x=type, y = mean_lag,
ymin = mean_lag - ste_lag,
ymax = mean_lag + ste_lag),
width = .5, linewidth = 2) +
ylab("memory performance (d')")
#apply linear mixed effects model:
memory.lm = lmer(value~type+(1|subID), data = plotDat)
anova(memory.lm)
#There is a significant difference in familairity of T1 images from blink trials
#versus non-blink trials, but the mean difference is small
t.test(df$blinkFam - df$nonBlinkFam)
mean(df$L1blink_UVSD_d - df$L1cor_UVSD_d) / sd(df$L1blink_UVSD_d - df$L1cor_UVSD_d)
mean(df$blinkFam - df$nonBlinkFam) / sd(df$blinkFam - df$nonBlinkFam)
df$blinkMemEffect = df$L1blink_UVSD_d - df$L1cor_UVSD_d
df$blinkFamEffect = df$blinkFam - df$nonBlinkFam
df %>% ggplot(aes(x = blinkFamEffect, y = blinkMemEffect)) +
geom_point()
cor.test(df$blinkFamEffect, df$blinkMemEffect)
df$blinkFamEffect =  df$nonBlinkFam - df$blinkFam
df %>% ggplot(aes(x = blinkFamEffect, y = blinkMemEffect)) +
geom_point()
cor.test(df$blinkFamEffect, df$blinkMemEffect)
